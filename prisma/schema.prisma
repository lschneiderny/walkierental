// Prisma schema for walkierentals (PostgreSQL with Prisma Accelerate)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  passwordHash String
  role         Role   @default("USER")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  orders       Order[]
}

model Product {
  id          String    @id @default(cuid())
  slug        String    @unique
  name        String
  description String?
  imageUrl    String? 
  sku         String?   @unique
  dailyRate   Decimal?
  // Stock represents number of units available for rentals
  stock       Int       @default(0)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  reservations Reservation[]
  orderItems   OrderItem[]
  packageItems PackageItem[]
}

model Package {
  id          String     @id @default(cuid())
  slug        String     @unique
  name        String
  description String?
  imageUrl    String?
  // Price per day for the whole package
  dailyRate   Decimal

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  items       PackageItem[]
}

model PackageItem {
  id         String   @id @default(cuid())
  packageId  String
  productId  String
  quantity   Int      @default(1)

  package    Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@unique([packageId, productId])
}

model Reservation {
  id        String   @id @default(cuid())
  productId String
  startDate DateTime
  endDate   DateTime
  quantity  Int       @default(1)
  orderId   String?

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  order     Order?   @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
}

model Order {
  id        String     @id @default(cuid())
  userId    String?
  status    String     @default("PENDING")
  type      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user      User?      @relation(fields: [userId], references: [id])
  items     OrderItem[]
  // For rental orders, there will also be associated Reservation rows
  reservations Reservation[]
}

model OrderItem {
  id               String   @id @default(cuid())
  orderId          String
  productId        String
  quantity         Int      @default(1)
  unitPrice        Decimal
  // For rentals only
  rentalStartDate  DateTime?
  rentalEndDate    DateTime?

  order            Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product          Product  @relation(fields: [productId], references: [id], onDelete: Restrict)
}
